{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.initialState = initialState;\n        this.copyInitialState = this.copy(initialState);\n        this.status = \"idle\";\n        this.score = 0;\n    }\n    copy(arr) {\n        return arr.map((row)=>[\n                ...row\n            ]);\n    }\n    moveLeft() {\n        if (this.status === \"playing\") {\n            const copyInitialState = this.copy(this.initialState);\n            for(let rowIndex = 0; rowIndex < 4; rowIndex++){\n                const newRow = [];\n                for(let i = 0; i < 4; i++)if (this.initialState[rowIndex][i] !== 0) newRow.push(this.initialState[rowIndex][i]);\n                this.mergeCells(newRow);\n                for(let index = 0; index < 4; index++)this.initialState[rowIndex][index] = newRow[index] || 0;\n            }\n            if (this.canMove(copyInitialState, this.initialState)) this.randomCell();\n            this.updateStatus();\n        }\n    }\n    moveRight() {\n        if (this.status === \"playing\") {\n            const copyInitialState = this.copy(this.initialState);\n            for(let rowIndex = 0; rowIndex < 4; rowIndex++){\n                const newRow = [];\n                for(let i = 3; i >= 0; i--)if (this.initialState[rowIndex][i] !== 0) newRow.push(this.initialState[rowIndex][i]);\n                this.mergeCells(newRow);\n                let newRowIndex = 0;\n                for(let index = 3; index >= 0; index--){\n                    this.initialState[rowIndex][index] = newRow[newRowIndex] || 0;\n                    newRowIndex++;\n                }\n            }\n            if (this.canMove(copyInitialState, this.initialState)) this.randomCell();\n            this.updateStatus();\n        }\n    }\n    moveUp() {\n        if (this.status === \"playing\") {\n            const copyInitialState = this.copy(this.initialState);\n            for(let columnIndex = 0; columnIndex < 4; columnIndex++){\n                const newColumn = [];\n                for(let rowIndex = 0; rowIndex < 4; rowIndex++)if (this.initialState[rowIndex][columnIndex] !== 0) newColumn.push(this.initialState[rowIndex][columnIndex]);\n                this.mergeCells(newColumn);\n                for(let rowIndex = 0; rowIndex < 4; rowIndex++)this.initialState[rowIndex][columnIndex] = newColumn[rowIndex] || 0;\n            }\n            if (this.canMove(copyInitialState, this.initialState)) this.randomCell();\n            this.updateStatus();\n        }\n    }\n    moveDown() {\n        if (this.status === \"playing\") {\n            const copyInitialState = this.copy(this.initialState);\n            for(let columnIndex = 0; columnIndex < 4; columnIndex++){\n                const newColumn = [];\n                for(let rowIndex = 3; rowIndex >= 0; rowIndex--)if (this.initialState[rowIndex][columnIndex] !== 0) newColumn.push(this.initialState[rowIndex][columnIndex]);\n                this.mergeCells(newColumn);\n                let index = 0;\n                for(let rowIndex = 3; rowIndex >= 0; rowIndex--){\n                    this.initialState[rowIndex][columnIndex] = newColumn[index] || 0;\n                    index++;\n                }\n            }\n            if (this.canMove(copyInitialState, this.initialState)) this.randomCell();\n            this.updateStatus();\n        }\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.initialState;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   */ getStatus() {\n        return this.status;\n    }\n    start() {\n        this.status = \"playing\";\n        this.randomCell();\n        this.randomCell();\n    }\n    restart() {\n        this.status = \"idle\";\n        this.score = 0;\n        this.initialState = this.copy(this.copyInitialState);\n    }\n    randomCell() {\n        const emptyCells = [];\n        for(let i = 0; i < 4; i++){\n            for(let j = 0; j < 4; j++)if (this.initialState[i][j] === 0) emptyCells.push({\n                row: i,\n                col: j\n            });\n        }\n        if (emptyCells.length > 0) {\n            const randomIndex = Math.floor(Math.random() * emptyCells.length);\n            const { row: row, col: col } = emptyCells[randomIndex];\n            this.initialState[row][col] = Math.random() < 0.1 ? 4 : 2;\n        }\n    }\n    canMove(oldState, newState) {\n        for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++){\n            if (oldState[i][j] !== newState[i][j]) return true;\n        }\n        return false;\n    }\n    checkGameOver(state) {\n        for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++){\n            if (state[i][j] === 0) return false;\n        }\n        for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++){\n            if (j < 3 && state[i][j] === state[i][j + 1]) return false;\n            if (i < 3 && state[i][j] === state[i + 1][j]) return false;\n        }\n        return true;\n    }\n    checkWin(state) {\n        for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++){\n            if (state[i][j] === 2048) return true;\n        }\n        return false;\n    }\n    updateStatus() {\n        if (this.status === \"playing\") {\n            if (this.checkWin(this.initialState)) this.status = \"win\";\n            else if (this.checkGameOver(this.initialState)) this.status = \"lose\";\n        }\n    }\n    mergeCells(row) {\n        for(let i = 0; i < row.length - 1; i++)if (row[i] === row[i + 1] && row[i] !== 0) {\n            row[i] *= 2;\n            this.score += row[i];\n            row.splice(i + 1, 1);\n        }\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const scoreResult = document.querySelector(\".game-score\");\n    const startButton = document.querySelector(\".start\");\n    const gameRows = document.querySelectorAll(\".field-row\");\n    function removeNumberClasses(cell) {\n        const classes = Array.from(cell.classList);\n        classes.forEach((className)=>{\n            if (/^field-cell--\\d+$/.test(className)) cell.classList.remove(className);\n        });\n    }\n    function showGameResult(currentStatus) {\n        if (currentStatus === \"win\" || currentStatus === \"lose\") {\n            const message = document.querySelector(`.message-${currentStatus}`);\n            if (message) message.classList.remove(\"hidden\");\n        }\n    }\n    function hideMessages() {\n        const messages = [\n            \"start\",\n            \"win\",\n            \"lose\"\n        ];\n        messages.forEach((type)=>{\n            const message = document.querySelector(`.message-${type}`);\n            if (message) message.classList.add(\"hidden\");\n        });\n    }\n    function updateGrid() {\n        const state = $09e991522ca7e64e$var$game.getState();\n        for(let rowIndex = 0; rowIndex < state.length; rowIndex++){\n            const cells = gameRows[rowIndex].querySelectorAll(\".field-cell\");\n            for(let cellIndex = 0; cellIndex < cells.length; cellIndex++){\n                const cellValue = state[rowIndex][cellIndex];\n                const cell = cells[cellIndex];\n                removeNumberClasses(cell);\n                if (cellValue !== 0) {\n                    cell.classList.add(`field-cell--${cellValue}`);\n                    cell.textContent = `${cellValue}`;\n                } else cell.textContent = \"\";\n            }\n        }\n        scoreResult.textContent = $09e991522ca7e64e$var$game.getScore();\n    }\n    function resetGame() {\n        $09e991522ca7e64e$var$game.restart();\n        hideMessages();\n        updateGrid();\n        startButton.classList.remove(\"restart\");\n        startButton.classList.add(\"start\");\n        startButton.textContent = \"Start\";\n        const messageStart = document.querySelector(\".message-start\");\n        if (messageStart) messageStart.classList.remove(\"hidden\");\n    }\n    function startGame() {\n        $09e991522ca7e64e$var$game.start();\n        hideMessages();\n        updateGrid();\n        startButton.classList.remove(\"start\");\n        startButton.classList.add(\"restart\");\n        startButton.textContent = \"Restart\";\n    }\n    startButton.addEventListener(\"click\", ()=>{\n        if ($09e991522ca7e64e$var$game.getStatus() === \"idle\") startGame();\n        else resetGame();\n    });\n    document.addEventListener(\"keydown\", (e)=>{\n        if ([\n            \"ArrowUp\",\n            \"ArrowDown\",\n            \"ArrowLeft\",\n            \"ArrowRight\"\n        ].includes(e.key)) {\n            e.preventDefault();\n            if ($09e991522ca7e64e$var$game.getStatus() !== \"playing\") return;\n            const previousState = JSON.stringify($09e991522ca7e64e$var$game.getState());\n            const previousScore = $09e991522ca7e64e$var$game.getScore();\n            switch(e.key){\n                case \"ArrowUp\":\n                    $09e991522ca7e64e$var$game.moveUp();\n                    break;\n                case \"ArrowDown\":\n                    $09e991522ca7e64e$var$game.moveDown();\n                    break;\n                case \"ArrowLeft\":\n                    $09e991522ca7e64e$var$game.moveLeft();\n                    break;\n                case \"ArrowRight\":\n                    $09e991522ca7e64e$var$game.moveRight();\n                    break;\n            }\n            const currentState = JSON.stringify($09e991522ca7e64e$var$game.getState());\n            const currentScore = $09e991522ca7e64e$var$game.getScore();\n            if (previousState !== currentState || previousScore !== currentScore) {\n                updateGrid();\n                showGameResult($09e991522ca7e64e$var$game.getStatus());\n            }\n        }\n    });\n    updateGrid();\n});\n\n\n//# sourceMappingURL=index.21ac7779.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const scoreResult = document.querySelector('.game-score');\n  const startButton = document.querySelector('.start');\n  const gameRows = document.querySelectorAll('.field-row');\n\n  function removeNumberClasses(cell) {\n    const classes = Array.from(cell.classList);\n\n    classes.forEach((className) => {\n      if (/^field-cell--\\d+$/.test(className)) {\n        cell.classList.remove(className);\n      }\n    });\n  }\n\n  function showGameResult(currentStatus) {\n    if (currentStatus === 'win' || currentStatus === 'lose') {\n      const message = document.querySelector(`.message-${currentStatus}`);\n\n      if (message) {\n        message.classList.remove('hidden');\n      }\n    }\n  }\n\n  function hideMessages() {\n    const messages = ['start', 'win', 'lose'];\n\n    messages.forEach((type) => {\n      const message = document.querySelector(`.message-${type}`);\n\n      if (message) {\n        message.classList.add('hidden');\n      }\n    });\n  }\n\n  function updateGrid() {\n    const state = game.getState();\n\n    for (let rowIndex = 0; rowIndex < state.length; rowIndex++) {\n      const cells = gameRows[rowIndex].querySelectorAll('.field-cell');\n\n      for (let cellIndex = 0; cellIndex < cells.length; cellIndex++) {\n        const cellValue = state[rowIndex][cellIndex];\n        const cell = cells[cellIndex];\n\n        removeNumberClasses(cell);\n\n        if (cellValue !== 0) {\n          cell.classList.add(`field-cell--${cellValue}`);\n          cell.textContent = `${cellValue}`;\n        } else {\n          cell.textContent = '';\n        }\n      }\n    }\n\n    scoreResult.textContent = game.getScore();\n  }\n\n  function resetGame() {\n    game.restart();\n    hideMessages();\n    updateGrid();\n\n    startButton.classList.remove('restart');\n    startButton.classList.add('start');\n    startButton.textContent = 'Start';\n\n    const messageStart = document.querySelector('.message-start');\n\n    if (messageStart) {\n      messageStart.classList.remove('hidden');\n    }\n  }\n\n  function startGame() {\n    game.start();\n    hideMessages();\n    updateGrid();\n\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n    startButton.textContent = 'Restart';\n  }\n\n  startButton.addEventListener('click', () => {\n    if (game.getStatus() === 'idle') {\n      startGame();\n    } else {\n      resetGame();\n    }\n  });\n\n  document.addEventListener('keydown', (e) => {\n    if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(e.key)) {\n      e.preventDefault();\n\n      if (game.getStatus() !== 'playing') {\n        return;\n      }\n\n      const previousState = JSON.stringify(game.getState());\n      const previousScore = game.getScore();\n\n      switch (e.key) {\n        case 'ArrowUp':\n          game.moveUp();\n          break;\n        case 'ArrowDown':\n          game.moveDown();\n          break;\n        case 'ArrowLeft':\n          game.moveLeft();\n          break;\n        case 'ArrowRight':\n          game.moveRight();\n          break;\n      }\n\n      const currentState = JSON.stringify(game.getState());\n      const currentScore = game.getScore();\n\n      if (previousState !== currentState || previousScore !== currentScore) {\n        updateGrid();\n        showGameResult(game.getStatus());\n      }\n    }\n  });\n\n  updateGrid();\n});\n","'use strict';\n\nclass Game {\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.initialState = initialState;\n\n    this.copyInitialState = this.copy(initialState);\n    this.status = 'idle';\n    this.score = 0;\n  }\n\n  copy(arr) {\n    return arr.map((row) => [...row]);\n  }\n\n  moveLeft() {\n    if (this.status === 'playing') {\n      const copyInitialState = this.copy(this.initialState);\n\n      for (let rowIndex = 0; rowIndex < 4; rowIndex++) {\n        const newRow = [];\n\n        for (let i = 0; i < 4; i++) {\n          if (this.initialState[rowIndex][i] !== 0) {\n            newRow.push(this.initialState[rowIndex][i]);\n          }\n        }\n\n        this.mergeCells(newRow);\n\n        for (let index = 0; index < 4; index++) {\n          this.initialState[rowIndex][index] = newRow[index] || 0;\n        }\n      }\n\n      if (this.canMove(copyInitialState, this.initialState)) {\n        this.randomCell();\n      }\n\n      this.updateStatus();\n    }\n  }\n\n  moveRight() {\n    if (this.status === 'playing') {\n      const copyInitialState = this.copy(this.initialState);\n\n      for (let rowIndex = 0; rowIndex < 4; rowIndex++) {\n        const newRow = [];\n\n        for (let i = 3; i >= 0; i--) {\n          if (this.initialState[rowIndex][i] !== 0) {\n            newRow.push(this.initialState[rowIndex][i]);\n          }\n        }\n\n        this.mergeCells(newRow);\n\n        let newRowIndex = 0;\n\n        for (let index = 3; index >= 0; index--) {\n          this.initialState[rowIndex][index] = newRow[newRowIndex] || 0;\n          newRowIndex++;\n        }\n      }\n\n      if (this.canMove(copyInitialState, this.initialState)) {\n        this.randomCell();\n      }\n\n      this.updateStatus();\n    }\n  }\n\n  moveUp() {\n    if (this.status === 'playing') {\n      const copyInitialState = this.copy(this.initialState);\n\n      for (let columnIndex = 0; columnIndex < 4; columnIndex++) {\n        const newColumn = [];\n\n        for (let rowIndex = 0; rowIndex < 4; rowIndex++) {\n          if (this.initialState[rowIndex][columnIndex] !== 0) {\n            newColumn.push(this.initialState[rowIndex][columnIndex]);\n          }\n        }\n\n        this.mergeCells(newColumn);\n\n        for (let rowIndex = 0; rowIndex < 4; rowIndex++) {\n          this.initialState[rowIndex][columnIndex] = newColumn[rowIndex] || 0;\n        }\n      }\n\n      if (this.canMove(copyInitialState, this.initialState)) {\n        this.randomCell();\n      }\n\n      this.updateStatus();\n    }\n  }\n\n  moveDown() {\n    if (this.status === 'playing') {\n      const copyInitialState = this.copy(this.initialState);\n\n      for (let columnIndex = 0; columnIndex < 4; columnIndex++) {\n        const newColumn = [];\n\n        for (let rowIndex = 3; rowIndex >= 0; rowIndex--) {\n          if (this.initialState[rowIndex][columnIndex] !== 0) {\n            newColumn.push(this.initialState[rowIndex][columnIndex]);\n          }\n        }\n\n        this.mergeCells(newColumn);\n\n        let index = 0;\n\n        for (let rowIndex = 3; rowIndex >= 0; rowIndex--) {\n          this.initialState[rowIndex][columnIndex] = newColumn[index] || 0;\n          index++;\n        }\n      }\n\n      if (this.canMove(copyInitialState, this.initialState)) {\n        this.randomCell();\n      }\n\n      this.updateStatus();\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.initialState;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = 'playing';\n\n    this.randomCell();\n    this.randomCell();\n  }\n\n  restart() {\n    this.status = 'idle';\n    this.score = 0;\n\n    this.initialState = this.copy(this.copyInitialState);\n  }\n\n  randomCell() {\n    const emptyCells = [];\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (this.initialState[i][j] === 0) {\n          emptyCells.push({\n            row: i, col: j,\n          });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const randomIndex = Math.floor(Math.random() * emptyCells.length);\n      const { row, col } = emptyCells[randomIndex];\n\n      this.initialState[row][col] = Math.random() < 0.1 ? 4 : 2;\n    }\n  }\n\n  canMove(oldState, newState) {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (oldState[i][j] !== newState[i][j]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  checkGameOver(state) {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (state[i][j] === 0) {\n          return false;\n        }\n      }\n    }\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (j < 3 && state[i][j] === state[i][j + 1]) {\n          return false;\n        }\n\n        if (i < 3 && state[i][j] === state[i + 1][j]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  checkWin(state) {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (state[i][j] === 2048) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  updateStatus() {\n    if (this.status === 'playing') {\n      if (this.checkWin(this.initialState)) {\n        this.status = 'win';\n      } else if (this.checkGameOver(this.initialState)) {\n        this.status = 'lose';\n      }\n    }\n  }\n\n  mergeCells(row) {\n    for (let i = 0; i < row.length - 1; i++) {\n      if (row[i] === row[i + 1] && row[i] !== 0) {\n        row[i] *= 2;\n        this.score += row[i];\n        row.splice(i + 1, 1);\n      }\n    }\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","copyInitialState","copy","status","score","arr","map","row","moveLeft","rowIndex","newRow","i","push","mergeCells","index","canMove","randomCell","updateStatus","moveRight","newRowIndex","moveUp","columnIndex","newColumn","moveDown","getScore","getState","getStatus","start","restart","emptyCells","j","col","length","randomIndex","Math","floor","random","oldState","newState","checkGameOver","state","checkWin","splice","document","addEventListener","scoreResult","querySelector","startButton","gameRows","querySelectorAll","hideMessages","messages","forEach","type","message","classList","add","updateGrid","cells","cellIndex","cellValue","cell","removeNumberClasses","classes","Array","from","className","test","remove","textContent","resetGame","messageStart","e","includes","key","preventDefault","previousState","JSON","stringify","previousScore","currentState","currentScore","showGameResult","currentStatus"],"version":3,"file":"index.21ac7779.js.map"}